apply plugin: 'c'

model {
    components {
        main(NativeLibrarySpec) {
            binaries.all {

                def javaHome =org.gradle.internal.jvm.Jvm.current().javaHome

                cCompiler.args '-I', "$javaHome/include"

                if(targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "$javaHome/include/darwin"
                }

                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "$javaHome/include/linux"
                }

                if(targetPlatform.operatingSystem.windows) {
                    cCompiler.args '-I', "$javaHome/include/win32"
                }

                // TODO: refactor the above and support solaris and FreeBSD
            }
        }
    }
}

task jniHeaders {
    def headerFile = new File('src/main/headers/jni_exports.h')

    inputs.files sourceSets.main.output
    outputs.file headerFile
    doLast {
        headerFile.parentFile.mkdirs()
        exec {
            executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
            args '-o', headerFile
            args '-classpath', sourceSets.main.output.classesDir
            // TODO: do for each file
            args 'ru.gvsmirnov.perv.labs.rekt.ChecksumCalculator'
        }
    }
}